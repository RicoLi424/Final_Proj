// auto-generated by bsg_ascii_to_rom.py from /home/kangll/ee477-designs-final-project/bsg_cgol_cell/v/trace.tr; do not modify
module trace_rom #(`BSG_INV_PARAM(width_p), `BSG_INV_PARAM(addr_width_p))
(input  [addr_width_p-1:0] addr_i
,output logic [width_p-1:0]      data_o
);
always_comb case(addr_i)
                                 // #####################################################################
                                 // # |<    4-bits    >|<      1-bit      >|<    1-bit   >|<   8-bits  >|
                                 // # +----------------+-------------------+--------------+-------------+
                                 // # | replay command | 0:update 1:enable | update value | 8 neighbors |
                                 // # +----------------+-------------------+--------------+-------------+
                                 // #####################################################################
                                 // # EXAMPLES:
                                 // # Update, value = 1
         0: data_o = width_p ' (14'b0001__0_1_00000000); // 0x0500
                                 // # Recv 1, live cell
         1: data_o = width_p ' (14'b0010__000000000_1); // 0x0801
                                 // # Enable, 8 neighbors = 8'b01000100
         2: data_o = width_p ' (14'b0001__1_0_01000100); // 0x0644
                                 // # Recv 1, a live cell with two live neighbours lives on to the next generation.
         3: data_o = width_p ' (14'b0010__000000000_1); // 0x0801
                                 // # TODO: Add more testing traces here!!!
                                 // # Please create at least 20 test cases:
                                 // # Set the update value to 0, then set enbale to 1 and test with 0-8 live neighbors
                                 // # Set the update value to 1, then set enbale to 1 and test with 0-8 live neighbors
                                 // # CASE 1
                                 // # Update, value = 0
         4: data_o = width_p ' (14'b0001__0_0_00000000); // 0x0400
                                 // # Recv 0, dead cell
         5: data_o = width_p ' (14'b0010__000000000_0); // 0x0800
                                 // # CASE 2
                                 // # Enable, 8 neighbors = 8'b00000000
         6: data_o = width_p ' (14'b0001__1_0_00000000); // 0x0600
                                 // # Recv 0, a dead cell with 0 live neighbours dies to the next generation.
         7: data_o = width_p ' (14'b0010__000000000_0); // 0x0800
                                 // # CASE 3
                                 // # Enable, 8 neighbors = 8'b00000001
         8: data_o = width_p ' (14'b0001__1_0_00000001); // 0x0601
                                 // # Recv 0, a dead cell with 1 live neighbours dies to the next generation.
         9: data_o = width_p ' (14'b0010__000000000_0); // 0x0800
                                 // # CASE 4
                                 // # Enable, 8 neighbors = 8'b00000011
        10: data_o = width_p ' (14'b0001__1_0_00000011); // 0x0603
                                 // # Recv 0, a dead cell with 2 live neighbours dies to the next generation.
        11: data_o = width_p ' (14'b0010__000000000_0); // 0x0800
                                 // # CASE 5
                                 // # Enable, 8 neighbors = 8'b00000111
        12: data_o = width_p ' (14'b0001__1_0_00000111); // 0x0607
                                 // # Recv 1, a dead cell with 3 live neighbours lives to the next generation.
        13: data_o = width_p ' (14'b0010__000000000_1); // 0x0801
                                 // # CASE 6
                                 // # Update, value = 0
        14: data_o = width_p ' (14'b0001__0_0_00000000); // 0x0400
                                 // # Recv 0, dead cell
        15: data_o = width_p ' (14'b0010__000000000_0); // 0x0800
                                 // # Enable, 8 neighbors = 8'b00001111
        16: data_o = width_p ' (14'b0001__1_0_00001111); // 0x060F
                                 // # Recv 1, a dead cell with 4 live neighbours lives to the next generation.
        17: data_o = width_p ' (14'b0010__000000000_1); // 0x0801
                                 // # CASE 7
                                 // # Update, value = 0
        18: data_o = width_p ' (14'b0001__0_0_00000000); // 0x0400
                                 // # Recv 0, dead cell
        19: data_o = width_p ' (14'b0010__000000000_0); // 0x0800
                                 // # Enable, 8 neighbors = 8'b00011111
        20: data_o = width_p ' (14'b0001__1_0_00011111); // 0x061F
                                 // # Recv 1, a dead cell with 5 live neighbours lives to the next generation.
        21: data_o = width_p ' (14'b0010__000000000_1); // 0x0801
                                 // # CASE 8
                                 // # Update, value = 0
        22: data_o = width_p ' (14'b0001__0_0_00000000); // 0x0400
                                 // # Recv 0, dead cell
        23: data_o = width_p ' (14'b0010__000000000_0); // 0x0800
                                 // # Enable, 8 neighbors = 8'b00111111
        24: data_o = width_p ' (14'b0001__1_0_00111111); // 0x063F
                                 // # Recv 1, a dead cell with 6 live neighbours lives to the next generation.
        25: data_o = width_p ' (14'b0010__000000000_1); // 0x0801
                                 // # CASE 9
                                 // # Update, value = 0
        26: data_o = width_p ' (14'b0001__0_0_00000000); // 0x0400
                                 // # Recv 0, dead cell
        27: data_o = width_p ' (14'b0010__000000000_0); // 0x0800
                                 // # Enable, 8 neighbors = 8'b01111111
        28: data_o = width_p ' (14'b0001__1_0_01111111); // 0x067F
                                 // # Recv 1, a dead cell with 7 live neighbours lives to the next generation.
        29: data_o = width_p ' (14'b0010__000000000_1); // 0x0801
                                 // # CASE 10
                                 // # Update, value = 0
        30: data_o = width_p ' (14'b0001__0_0_00000000); // 0x0400
                                 // # Recv 0, dead cell
        31: data_o = width_p ' (14'b0010__000000000_0); // 0x0800
                                 // # Enable, 8 neighbors = 8'b11111111
        32: data_o = width_p ' (14'b0001__1_0_11111111); // 0x06FF
                                 // # Recv 1, a dead cell with 8 live neighbours lives to the next generation.
        33: data_o = width_p ' (14'b0010__000000000_1); // 0x0801
                                 // # CASE 11
                                 // # Update, value = 1
        34: data_o = width_p ' (14'b0001__0_1_00000000); // 0x0500
                                 // # Recv 1, live cell
        35: data_o = width_p ' (14'b0010__000000000_1); // 0x0801
                                 // # CASE 12
                                 // # Enable, 8 neighbors = 8'b00000000
        36: data_o = width_p ' (14'b0001__1_0_00000000); // 0x0600
                                 // # Recv 0, a live cell with 0 live neighbours dies to the next generation.
        37: data_o = width_p ' (14'b0010__000000000_0); // 0x0800
                                 // # CASE 13
                                 // # Update, value = 1
        38: data_o = width_p ' (14'b0001__0_1_00000000); // 0x0500
                                 // # Recv 1, live cell
        39: data_o = width_p ' (14'b0010__000000000_1); // 0x0801
                                 // # Enable, 8 neighbors = 8'b00000001
        40: data_o = width_p ' (14'b0001__1_0_00000001); // 0x0601
                                 // # Recv 0, a live cell with 1 live neighbours dies to the next generation.
        41: data_o = width_p ' (14'b0010__000000000_0); // 0x0800
                                 // # CASE 14
                                 // # Update, value = 1
        42: data_o = width_p ' (14'b0001__0_1_00000000); // 0x0500
                                 // # Recv 1, live cell
        43: data_o = width_p ' (14'b0010__000000000_1); // 0x0801
                                 // # Enable, 8 neighbors = 8'b00000011
        44: data_o = width_p ' (14'b0001__1_0_00000011); // 0x0603
                                 // # Recv 1, a live cell with 2 live neighbours lives to the next generation.
        45: data_o = width_p ' (14'b0010__000000000_1); // 0x0801
                                 // # CASE 15
                                 // # Enable, 8 neighbors = 8'b00000111
        46: data_o = width_p ' (14'b0001__1_0_00000111); // 0x0607
                                 // # Recv 1, a live cell with 3 live neighbours lives to the next generation.
        47: data_o = width_p ' (14'b0010__000000000_1); // 0x0801
                                 // # CASE 16
                                 // # Enable, 8 neighbors = 8'b00001111
        48: data_o = width_p ' (14'b0001__1_0_00001111); // 0x060F
                                 // # Recv 1, a live cell with 4 live neighbours lives to the next generation.
        49: data_o = width_p ' (14'b0010__000000000_1); // 0x0801
                                 // # CASE 17
                                 // # Enable, 8 neighbors = 8'b00011111
        50: data_o = width_p ' (14'b0001__1_0_00011111); // 0x061F
                                 // # Recv 1, a live cell with 5 live neighbours lives to the next generation.
        51: data_o = width_p ' (14'b0010__000000000_1); // 0x0801
                                 // # CASE 18
                                 // # Enable, 8 neighbors = 8'b00111111
        52: data_o = width_p ' (14'b0001__1_0_00111111); // 0x063F
                                 // # Recv 1, a live cell with 6 live neighbours lives to the next generation.
        53: data_o = width_p ' (14'b0010__000000000_1); // 0x0801
                                 // # CASE 19
                                 // # Enable, 8 neighbors = 8'b01111111
        54: data_o = width_p ' (14'b0001__1_0_01111111); // 0x067F
                                 // # Recv 1, a live cell with 7 live neighbours lives to the next generation.
        55: data_o = width_p ' (14'b0010__000000000_1); // 0x0801
                                 // # CASE 20
                                 // # Enable, 8 neighbors = 8'b11111111
        56: data_o = width_p ' (14'b0001__1_0_11111111); // 0x06FF
                                 // # Recv 1, a live cell with 8 live neighbours lives to the next generation.
        57: data_o = width_p ' (14'b0010__000000000_1); // 0x0801
                                 // # Finish simulation
        58: data_o = width_p ' (14'b0100__0_0_00000000); // 0x1000
   default: data_o = 'X;
endcase
endmodule
`BSG_ABSTRACT_MODULE(trace_rom)
