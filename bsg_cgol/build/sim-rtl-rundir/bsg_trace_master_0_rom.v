// auto-generated by bsg_ascii_to_rom.py from /home/kangll/ee477-designs-final-project/bsg_cgol/v/bsg_trace_master_0.tr; do not modify
module bsg_trace_master_0_rom #(`BSG_INV_PARAM(width_p), `BSG_INV_PARAM(addr_width_p))
(input  [addr_width_p-1:0] addr_i
,output logic [width_p-1:0]      data_o
);
always_comb case(addr_i)
                                 // # This trace file was generated by "final_project_pre_sim.py" with the config file "py/small_sim_cfg.yml", do not directly modify!
                                 // # Board size: 3x3, max game length: 1
                                 // # Beginning trace ROM with 9 games:
                                 // ########## Game 1 ##########
                                 // ### sending board config (game length 1) ###
         0: data_o = width_p ' (80'b0001____0_00000000000_000000000000000000000000000000000000000000000000000000000010000_1); // 0x10000000000000000021
                                 // ### Checking board output ###
         1: data_o = width_p ' (80'b0010____0_00000000000_0000000000000000000000000000000000000000000000000000000000000000); // 0x20000000000000000000
                                 // ########## Game 2 ##########
                                 // ### sending board config (game length 1) ###
         2: data_o = width_p ' (80'b0001____0_00000000000_000000000000000000000000000000000000000000000000000000000010001_1); // 0x10000000000000000023
                                 // ### Checking board output ###
         3: data_o = width_p ' (80'b0010____0_00000000000_0000000000000000000000000000000000000000000000000000000000000000); // 0x20000000000000000000
                                 // ########## Game 3 ##########
                                 // ### sending board config (game length 1) ###
         4: data_o = width_p ' (80'b0001____0_00000000000_000000000000000000000000000000000000000000000000000000000011001_1); // 0x10000000000000000033
                                 // ### Checking board output ###
         5: data_o = width_p ' (80'b0010____0_00000000000_0000000000000000000000000000000000000000000000000000000000011011); // 0x2000000000000000001B
                                 // ########## Game 4 ##########
                                 // ### sending board config (game length 1) ###
         6: data_o = width_p ' (80'b0001____0_00000000000_000000000000000000000000000000000000000000000000000000001011001_1); // 0x100000000000000000B3
                                 // ### Checking board output ###
         7: data_o = width_p ' (80'b0010____0_00000000000_0000000000000000000000000000000000000000000000000000000011011011); // 0x200000000000000000DB
                                 // ########## Game 5 ##########
                                 // ### sending board config (game length 1) ###
         8: data_o = width_p ' (80'b0001____0_00000000000_000000000000000000000000000000000000000000000000000000011011001_1); // 0x100000000000000001B3
                                 // ### Checking board output ###
         9: data_o = width_p ' (80'b0010____0_00000000000_0000000000000000000000000000000000000000000000000000000011000011); // 0x200000000000000000C3
                                 // ########## Game 6 ##########
                                 // ### sending board config (game length 1) ###
        10: data_o = width_p ' (80'b0001____0_00000000000_000000000000000000000000000000000000000000000000000000111011001_1); // 0x100000000000000003B3
                                 // ### Checking board output ###
        11: data_o = width_p ' (80'b0010____0_00000000000_0000000000000000000000000000000000000000000000000000000101100011); // 0x20000000000000000163
                                 // ########## Game 7 ##########
                                 // ### sending board config (game length 1) ###
        12: data_o = width_p ' (80'b0001____0_00000000000_000000000000000000000000000000000000000000000000000000111111001_1); // 0x100000000000000003F3
                                 // ### Checking board output ###
        13: data_o = width_p ' (80'b0010____0_00000000000_0000000000000000000000000000000000000000000000000000000101100001); // 0x20000000000000000161
                                 // ########## Game 8 ##########
                                 // ### sending board config (game length 1) ###
        14: data_o = width_p ' (80'b0001____0_00000000000_000000000000000000000000000000000000000000000000000000111111101_1); // 0x100000000000000003FB
                                 // ### Checking board output ###
        15: data_o = width_p ' (80'b0010____0_00000000000_0000000000000000000000000000000000000000000000000000000101000101); // 0x20000000000000000145
                                 // ########## Game 9 ##########
                                 // ### sending board config (game length 1) ###
        16: data_o = width_p ' (80'b0001____0_00000000000_000000000000000000000000000000000000000000000000000000111111111_1); // 0x100000000000000003FF
                                 // ### Checking board output ###
        17: data_o = width_p ' (80'b0010____0_00000000000_0000000000000000000000000000000000000000000000000000000101000101); // 0x20000000000000000145
                                 // ########## SIMULATION FINISHED ##########
        18: data_o = width_p ' (80'b0011____0_00000000000_0000000000000000000000000000000000000000000000000000000000000000); // 0x30000000000000000000
   default: data_o = 'X;
endcase
endmodule
`BSG_ABSTRACT_MODULE(bsg_trace_master_0_rom)
